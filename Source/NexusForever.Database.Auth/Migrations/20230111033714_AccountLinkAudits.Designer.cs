// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NexusForever.Database.Auth;

#nullable disable

namespace NexusForever.Database.Auth.Migrations
{
    [DbContext(typeof(AuthContext))]
    [Migration("20230111033714_AccountLinkAudits")]
    partial class AccountLinkAudits
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountCostumeUnlockModel", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("id");

                    b.Property<uint>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("itemId");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.HasKey("Id", "ItemId")
                        .HasName("PRIMARY");

                    b.ToTable("account_costume_unlock", (string)null);
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountCurrencyModel", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("id");

                    b.Property<byte>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("currencyId");

                    b.Property<ulong>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("amount");

                    b.HasKey("Id", "CurrencyId")
                        .HasName("PRIMARY");

                    b.ToTable("account_currency", (string)null);
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountEntitlementModel", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("id");

                    b.Property<byte>("EntitlementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("entitlementId");

                    b.Property<uint>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("amount");

                    b.HasKey("Id", "EntitlementId")
                        .HasName("PRIMARY");

                    b.ToTable("account_entitlement", (string)null);
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountGenericUnlockModel", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("id");

                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("entry");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.HasKey("Id", "Entry")
                        .HasName("PRIMARY");

                    b.ToTable("account_generic_unlock", (string)null);
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountItemCooldownModel", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("id");

                    b.Property<uint>("CooldownGroupId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("cooldownGroupId");

                    b.Property<uint>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("duration");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.HasKey("Id", "CooldownGroupId")
                        .HasName("PRIMARY");

                    b.ToTable("account_item_cooldown", (string)null);
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountItemModel", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("entry");

                    b.Property<uint>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("accountId");

                    b.Property<uint>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("itemId");

                    b.HasKey("Id", "AccountId")
                        .HasName("PRIMARY");

                    b.HasIndex("AccountId");

                    b.ToTable("account_item", (string)null);
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountKeybindingModel", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("id");

                    b.Property<ushort>("InputActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("inputActionId");

                    b.Property<uint>("Code00")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("code00");

                    b.Property<uint>("Code01")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("code01");

                    b.Property<uint>("Code02")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("code02");

                    b.Property<uint>("DeviceEnum00")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("deviceEnum00");

                    b.Property<uint>("DeviceEnum01")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("deviceEnum01");

                    b.Property<uint>("DeviceEnum02")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("deviceEnum02");

                    b.Property<uint>("EventTypeEnum00")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("eventTypeEnum00");

                    b.Property<uint>("EventTypeEnum01")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("eventTypeEnum01");

                    b.Property<uint>("EventTypeEnum02")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("eventTypeEnum02");

                    b.Property<uint>("MetaKeys00")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("metaKeys00");

                    b.Property<uint>("MetaKeys01")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("metaKeys01");

                    b.Property<uint>("MetaKeys02")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("metaKeys02");

                    b.HasKey("Id", "InputActionId")
                        .HasName("PRIMARY");

                    b.ToTable("account_keybinding", (string)null);
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountLinkEntryModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("0")
                        .HasColumnName("id");

                    b.Property<uint>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("accountId");

                    b.HasKey("Id", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("account_link_entry", (string)null);
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountLinkModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("0")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("")
                        .HasColumnName("createdBy");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("account_link", (string)null);
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountModel", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("")
                        .HasColumnName("email");

                    b.Property<string>("GameToken")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(32)")
                        .HasDefaultValue("")
                        .HasColumnName("gameToken");

                    b.Property<string>("S")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(32)")
                        .HasDefaultValue("")
                        .HasColumnName("s");

                    b.Property<string>("SessionKey")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(32)")
                        .HasDefaultValue("")
                        .HasColumnName("sessionKey");

                    b.Property<string>("V")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(512)")
                        .HasDefaultValue("")
                        .HasColumnName("v");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("email");

                    b.HasIndex("GameToken")
                        .HasDatabaseName("gameToken");

                    b.HasIndex("SessionKey")
                        .HasDatabaseName("sessionKey");

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountPermissionModel", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("id");

                    b.Property<uint>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("permissionId");

                    b.HasKey("Id", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("account_permission", (string)null);
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountRewardTrackMilestoneModel", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("id");

                    b.Property<uint>("RewardTrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("rewardTrackId");

                    b.Property<uint>("MilestoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("milestoneId");

                    b.Property<int>("Choice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1)
                        .HasColumnName("choice");

                    b.Property<uint>("PointsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("pointsRequired");

                    b.HasKey("Id", "RewardTrackId", "MilestoneId")
                        .HasName("PRIMARY");

                    b.ToTable("account_reward_track_milestone", (string)null);
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountRewardTrackModel", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("id");

                    b.Property<uint>("RewardTrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("rewardTrackId");

                    b.Property<uint>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("points");

                    b.HasKey("Id", "RewardTrackId")
                        .HasName("PRIMARY");

                    b.ToTable("account_reward_track", (string)null);
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountRoleModel", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("id");

                    b.Property<uint>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("roleId");

                    b.HasKey("Id", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("account_role", (string)null);
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountStoreTransactionModel", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("id");

                    b.Property<uint>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(20) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("transactionId");

                    b.Property<float>("Cost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("cost");

                    b.Property<short>("CurrencyType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5)")
                        .HasDefaultValue((short)6)
                        .HasColumnName("currencyType");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(256)")
                        .HasDefaultValue("")
                        .HasColumnName("name");

                    b.Property<DateTime>("TransactionDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("transactionDateTime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.HasKey("Id", "TransactionId");

                    b.ToTable("account_store_transaction", (string)null);
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.PermissionModel", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(64)")
                        .HasDefaultValue("")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("permission", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1u,
                            Name = "Category: Account"
                        },
                        new
                        {
                            Id = 2u,
                            Name = "Command: AccountCreate"
                        },
                        new
                        {
                            Id = 3u,
                            Name = "Command: AccountDelete"
                        },
                        new
                        {
                            Id = 15u,
                            Name = "Category: Achievement"
                        },
                        new
                        {
                            Id = 17u,
                            Name = "Command: AchievementUpdate"
                        },
                        new
                        {
                            Id = 16u,
                            Name = "Command: AchievementGrant"
                        },
                        new
                        {
                            Id = 18u,
                            Name = "Category: Broadcast"
                        },
                        new
                        {
                            Id = 19u,
                            Name = "Command: BroadcastMessage"
                        },
                        new
                        {
                            Id = 20u,
                            Name = "Category: Character"
                        },
                        new
                        {
                            Id = 21u,
                            Name = "Command: CharacterXP"
                        },
                        new
                        {
                            Id = 22u,
                            Name = "Command: CharacterLevel"
                        },
                        new
                        {
                            Id = 5u,
                            Name = "Command: CharacterSave"
                        },
                        new
                        {
                            Id = 23u,
                            Name = "Category: Currency"
                        },
                        new
                        {
                            Id = 24u,
                            Name = "Category: CurrencyAccount"
                        },
                        new
                        {
                            Id = 25u,
                            Name = "Command: CurrencyAccountAdd"
                        },
                        new
                        {
                            Id = 26u,
                            Name = "Command: CurrencyAccountList"
                        },
                        new
                        {
                            Id = 27u,
                            Name = "Category: CurrencyCharacter"
                        },
                        new
                        {
                            Id = 28u,
                            Name = "Command: CurrencyCharacterAdd"
                        },
                        new
                        {
                            Id = 29u,
                            Name = "Command: CurrencyCharacterList"
                        },
                        new
                        {
                            Id = 30u,
                            Name = "Category: Disable"
                        },
                        new
                        {
                            Id = 31u,
                            Name = "Command: DisableInfo"
                        },
                        new
                        {
                            Id = 32u,
                            Name = "Command: DisableReload"
                        },
                        new
                        {
                            Id = 33u,
                            Name = "Category: Door"
                        },
                        new
                        {
                            Id = 34u,
                            Name = "Command: DoorOpen"
                        },
                        new
                        {
                            Id = 35u,
                            Name = "Command: DoorClose"
                        },
                        new
                        {
                            Id = 36u,
                            Name = "Category: Entitlement"
                        },
                        new
                        {
                            Id = 40u,
                            Name = "Category: EntitlementAccount"
                        },
                        new
                        {
                            Id = 41u,
                            Name = "Command: EntitlementAdd"
                        },
                        new
                        {
                            Id = 42u,
                            Name = "Command: EntitlementAccountList"
                        },
                        new
                        {
                            Id = 37u,
                            Name = "Category: EntitlementCharacter"
                        },
                        new
                        {
                            Id = 39u,
                            Name = "Command: EntitlementCharacterList"
                        },
                        new
                        {
                            Id = 43u,
                            Name = "Category: Entity"
                        },
                        new
                        {
                            Id = 44u,
                            Name = "Command: EntityInfo"
                        },
                        new
                        {
                            Id = 45u,
                            Name = "Command: EntityProperties"
                        },
                        new
                        {
                            Id = 60u,
                            Name = "Category: EntityModify"
                        },
                        new
                        {
                            Id = 61u,
                            Name = "Command: EntityModifyDisplayInfo"
                        },
                        new
                        {
                            Id = 46u,
                            Name = "Category: Generic"
                        },
                        new
                        {
                            Id = 47u,
                            Name = "Command: GenericUnlock"
                        },
                        new
                        {
                            Id = 48u,
                            Name = "Command: GenericUnlockAll"
                        },
                        new
                        {
                            Id = 49u,
                            Name = "Command: GenericList"
                        },
                        new
                        {
                            Id = 4u,
                            Name = "Category: Help"
                        },
                        new
                        {
                            Id = 54u,
                            Name = "Category: House"
                        },
                        new
                        {
                            Id = 58u,
                            Name = "Command: HouseTeleport"
                        },
                        new
                        {
                            Id = 55u,
                            Name = "Category: HouseDecor"
                        },
                        new
                        {
                            Id = 56u,
                            Name = "Command: HouseDecorAdd"
                        },
                        new
                        {
                            Id = 57u,
                            Name = "Command: HouseDecorLookup"
                        },
                        new
                        {
                            Id = 59u,
                            Name = "Category: Item"
                        },
                        new
                        {
                            Id = 6u,
                            Name = "Command: ItemAdd"
                        },
                        new
                        {
                            Id = 62u,
                            Name = "Category: Movement"
                        },
                        new
                        {
                            Id = 63u,
                            Name = "Category: MovementSpline"
                        },
                        new
                        {
                            Id = 64u,
                            Name = "Command: MovementSplineAdd"
                        },
                        new
                        {
                            Id = 65u,
                            Name = "Command: MovementSplineClear"
                        },
                        new
                        {
                            Id = 66u,
                            Name = "Command: MovementSplineLaunch"
                        },
                        new
                        {
                            Id = 67u,
                            Name = "Category: MovementGenerator"
                        },
                        new
                        {
                            Id = 68u,
                            Name = "Command: MovementGeneratorDirect"
                        },
                        new
                        {
                            Id = 69u,
                            Name = "Command: MovementGeneratorRandom"
                        },
                        new
                        {
                            Id = 70u,
                            Name = "Category: Path"
                        },
                        new
                        {
                            Id = 71u,
                            Name = "Command: PathUnlock"
                        },
                        new
                        {
                            Id = 72u,
                            Name = "Command: PathActivate"
                        },
                        new
                        {
                            Id = 73u,
                            Name = "Command: PathXP"
                        },
                        new
                        {
                            Id = 74u,
                            Name = "Category: Pet"
                        },
                        new
                        {
                            Id = 75u,
                            Name = "Command: PetUnlockFlair"
                        },
                        new
                        {
                            Id = 76u,
                            Name = "Category: Quest"
                        },
                        new
                        {
                            Id = 77u,
                            Name = "Command: QuestAdd"
                        },
                        new
                        {
                            Id = 78u,
                            Name = "Command: QuestAchieve"
                        },
                        new
                        {
                            Id = 79u,
                            Name = "Command: QuestAchieveObjective"
                        },
                        new
                        {
                            Id = 80u,
                            Name = "Command: QuestObjective"
                        },
                        new
                        {
                            Id = 81u,
                            Name = "Command: QuestKill"
                        },
                        new
                        {
                            Id = 7u,
                            Name = "Category: RBAC"
                        },
                        new
                        {
                            Id = 8u,
                            Name = "Category: RBACAccount"
                        },
                        new
                        {
                            Id = 9u,
                            Name = "Category: RBACAccountPermission"
                        },
                        new
                        {
                            Id = 10u,
                            Name = "Command: RBACAccountPermissionGrant"
                        },
                        new
                        {
                            Id = 11u,
                            Name = "Command: RBACAccountPermissionRevoke"
                        },
                        new
                        {
                            Id = 12u,
                            Name = "Category: RBACAccountRole"
                        },
                        new
                        {
                            Id = 13u,
                            Name = "Command: RBACAccountRoleGrant"
                        },
                        new
                        {
                            Id = 14u,
                            Name = "Command: RBACAccountRoleRevoke"
                        },
                        new
                        {
                            Id = 83u,
                            Name = "Category: Spell"
                        },
                        new
                        {
                            Id = 84u,
                            Name = "Command: SpellAdd"
                        },
                        new
                        {
                            Id = 85u,
                            Name = "Command: SpellCast"
                        },
                        new
                        {
                            Id = 86u,
                            Name = "Command: SpellResetCooldown"
                        },
                        new
                        {
                            Id = 50u,
                            Name = "Category: Teleport"
                        },
                        new
                        {
                            Id = 51u,
                            Name = "Command: TeleportCoordinates"
                        },
                        new
                        {
                            Id = 52u,
                            Name = "Command: TeleportLocation"
                        },
                        new
                        {
                            Id = 53u,
                            Name = "Command: TeleportName"
                        },
                        new
                        {
                            Id = 87u,
                            Name = "Category: Title"
                        },
                        new
                        {
                            Id = 88u,
                            Name = "Command: TitleAdd"
                        },
                        new
                        {
                            Id = 89u,
                            Name = "Command: TitleRevoke"
                        },
                        new
                        {
                            Id = 90u,
                            Name = "Command: TitleAll"
                        },
                        new
                        {
                            Id = 91u,
                            Name = "Command: TitleNone"
                        },
                        new
                        {
                            Id = 92u,
                            Name = "Command: ItemLookup"
                        },
                        new
                        {
                            Id = 82u,
                            Name = "Category: Realm"
                        },
                        new
                        {
                            Id = 94u,
                            Name = "Command: RealmMOTD"
                        },
                        new
                        {
                            Id = 95u,
                            Name = "Category: Story"
                        },
                        new
                        {
                            Id = 96u,
                            Name = "Command: StoryPanel"
                        },
                        new
                        {
                            Id = 97u,
                            Name = "Command: StoryCommunicator"
                        },
                        new
                        {
                            Id = 98u,
                            Name = "Category: Reputation"
                        },
                        new
                        {
                            Id = 99u,
                            Name = "Command: ReputationUpdate"
                        },
                        new
                        {
                            Id = 100u,
                            Name = "Category: Guild"
                        },
                        new
                        {
                            Id = 101u,
                            Name = "Command: GuildRegister"
                        },
                        new
                        {
                            Id = 102u,
                            Name = "Command: GuildJoin"
                        },
                        new
                        {
                            Id = 103u,
                            Name = "Category: Map"
                        },
                        new
                        {
                            Id = 104u,
                            Name = "Command: MapUnload"
                        },
                        new
                        {
                            Id = 105u,
                            Name = "Command: MapPlayerRemove"
                        },
                        new
                        {
                            Id = 106u,
                            Name = "Command: MapPlayerRemoveCancel"
                        },
                        new
                        {
                            Id = 107u,
                            Name = "Category: RealmShutdown"
                        },
                        new
                        {
                            Id = 108u,
                            Name = "Command: RealmShutdownStart"
                        },
                        new
                        {
                            Id = 109u,
                            Name = "Command: RealmShutdownCancel"
                        },
                        new
                        {
                            Id = 110u,
                            Name = "Command: QuestList"
                        },
                        new
                        {
                            Id = 111u,
                            Name = "Command: RealmMaxPlayers"
                        },
                        new
                        {
                            Id = 112u,
                            Name = "Command: AccountPassword"
                        },
                        new
                        {
                            Id = 113u,
                            Name = "Command: AccountAdminPassword"
                        },
                        new
                        {
                            Id = 115u,
                            Name = "Category: EntityThreat"
                        },
                        new
                        {
                            Id = 116u,
                            Name = "Command: EntityThreatAdjust"
                        },
                        new
                        {
                            Id = 117u,
                            Name = "Command: EntityThreatList"
                        },
                        new
                        {
                            Id = 118u,
                            Name = "Command: EntityThreatClear"
                        },
                        new
                        {
                            Id = 119u,
                            Name = "Command: EntityThreatRemove"
                        },
                        new
                        {
                            Id = 2000u,
                            Name = "Category: RewardTrack"
                        },
                        new
                        {
                            Id = 2001u,
                            Name = "Command: RewardTrackUpdate"
                        },
                        new
                        {
                            Id = 2002u,
                            Name = "Command: QuestActivate"
                        },
                        new
                        {
                            Id = 50000u,
                            Name = "Category: Morph"
                        },
                        new
                        {
                            Id = 50001u,
                            Name = "Command: MorphStoryTeller"
                        },
                        new
                        {
                            Id = 50100u,
                            Name = "Category: Emote"
                        },
                        new
                        {
                            Id = 50200u,
                            Name = "Category: Chron"
                        },
                        new
                        {
                            Id = 50300u,
                            Name = "Category: XRoll"
                        },
                        new
                        {
                            Id = 50400u,
                            Name = "Command: CharacterProps"
                        },
                        new
                        {
                            Id = 50500u,
                            Name = "Category: Boost"
                        },
                        new
                        {
                            Id = 50600u,
                            Name = "Command: HouseRemodel"
                        },
                        new
                        {
                            Id = 50700u,
                            Name = "Command: RealmOnline"
                        },
                        new
                        {
                            Id = 50710u,
                            Name = "Command: RealmUptime"
                        },
                        new
                        {
                            Id = 50900u,
                            Name = "Flag: GM"
                        },
                        new
                        {
                            Id = 60000u,
                            Name = "Category: Costume"
                        },
                        new
                        {
                            Id = 60010u,
                            Name = "Command: CostumeOverride"
                        },
                        new
                        {
                            Id = 60020u,
                            Name = "Command: CostumeOverrideId"
                        },
                        new
                        {
                            Id = 61000u,
                            Name = "Flag: Adult"
                        },
                        new
                        {
                            Id = 61100u,
                            Name = "Command: AdultPlotLockSelf"
                        },
                        new
                        {
                            Id = 61150u,
                            Name = "Command: AdultPlotLockNonOwner"
                        },
                        new
                        {
                            Id = 61200u,
                            Name = "Command: AdultPlotAlert"
                        },
                        new
                        {
                            Id = 10000u,
                            Name = "Other: InstantLogout"
                        },
                        new
                        {
                            Id = 10001u,
                            Name = "Other: Signature"
                        },
                        new
                        {
                            Id = 10002u,
                            Name = "Other: BypassInstanceLimits"
                        },
                        new
                        {
                            Id = 10003u,
                            Name = "Other: GMFlag"
                        });
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.RoleModel", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("id");

                    b.Property<uint>("Flags")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("flags");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(64)")
                        .HasDefaultValue("")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1u,
                            Flags = 1u,
                            Name = "Player"
                        },
                        new
                        {
                            Id = 2u,
                            Flags = 1u,
                            Name = "GameMaster"
                        },
                        new
                        {
                            Id = 3u,
                            Flags = 2u,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 4u,
                            Flags = 2u,
                            Name = "Console"
                        },
                        new
                        {
                            Id = 5u,
                            Flags = 2u,
                            Name = "WebSocket"
                        },
                        new
                        {
                            Id = 6u,
                            Flags = 1u,
                            Name = "Storyteller"
                        },
                        new
                        {
                            Id = 7u,
                            Flags = 1u,
                            Name = "NSFWS"
                        },
                        new
                        {
                            Id = 8u,
                            Flags = 1u,
                            Name = "NFSWSMod"
                        });
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.RolePermissionModel", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("id");

                    b.Property<uint>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("permissionId");

                    b.HasKey("Id", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("role_permission", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1u,
                            PermissionId = 4u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 1u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 112u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 20u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 21u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 22u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 5u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 23u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 24u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 25u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 26u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 27u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 28u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 29u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 33u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 34u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 35u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 36u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 37u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 38u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 39u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 40u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 41u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 42u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 43u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 44u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 46u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 47u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 48u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 49u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 50u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 51u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 52u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 53u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 54u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 55u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 56u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 57u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 58u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 59u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 6u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 92u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 76u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 110u
                        },
                        new
                        {
                            Id = 1u,
                            PermissionId = 78u
                        });
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.ServerMessageModel", b =>
                {
                    b.Property<byte>("Index")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("index");

                    b.Property<byte>("Language")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("language");

                    b.Property<string>("Message")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(256)")
                        .HasDefaultValue("")
                        .HasColumnName("message");

                    b.HasKey("Index", "Language")
                        .HasName("PRIMARY");

                    b.ToTable("server_message", (string)null);

                    b.HasData(
                        new
                        {
                            Index = (byte)0,
                            Language = (byte)0,
                            Message = "Welcome to this NexusForever server!\nVisit: https://github.com/NexusForever/NexusForever"
                        },
                        new
                        {
                            Index = (byte)0,
                            Language = (byte)1,
                            Message = "Willkommen auf diesem NexusForever server!\nBesuch: https://github.com/NexusForever/NexusForever"
                        });
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.ServerModel", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("id");

                    b.Property<bool>("AssumeOnline")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Host")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(64)")
                        .HasDefaultValue("127.0.0.1")
                        .HasColumnName("host");

                    b.Property<string>("InternalIP")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(64)")
                        .HasDefaultValue("NexusForever")
                        .HasColumnName("name");

                    b.Property<ushort>("Port")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)24000)
                        .HasColumnName("port");

                    b.Property<byte>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("server", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            AssumeOnline = false,
                            Host = "127.0.0.1",
                            Name = "NexusForever",
                            Port = (ushort)24000,
                            Type = (byte)0
                        });
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountCostumeUnlockModel", b =>
                {
                    b.HasOne("NexusForever.Database.Auth.Model.AccountModel", "Account")
                        .WithMany("AccountCostumeUnlock")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__account_costume_item_id__account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountCurrencyModel", b =>
                {
                    b.HasOne("NexusForever.Database.Auth.Model.AccountModel", "Account")
                        .WithMany("AccountCurrency")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__account_currency_id__account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountEntitlementModel", b =>
                {
                    b.HasOne("NexusForever.Database.Auth.Model.AccountModel", "Account")
                        .WithMany("AccountEntitlement")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__account_entitlement_id__account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountGenericUnlockModel", b =>
                {
                    b.HasOne("NexusForever.Database.Auth.Model.AccountModel", "Account")
                        .WithMany("AccountGenericUnlock")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__account_generic_unlock_id__account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountItemCooldownModel", b =>
                {
                    b.HasOne("NexusForever.Database.Auth.Model.AccountModel", "Account")
                        .WithMany("AccountItemCooldown")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__account_item_cooldown_id__account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountItemModel", b =>
                {
                    b.HasOne("NexusForever.Database.Auth.Model.AccountModel", "Account")
                        .WithMany("AccountItem")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__account_item_accountId__account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountKeybindingModel", b =>
                {
                    b.HasOne("NexusForever.Database.Auth.Model.AccountModel", "Account")
                        .WithMany("AccountKeybinding")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__account_keybinding_id__account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountLinkEntryModel", b =>
                {
                    b.HasOne("NexusForever.Database.Auth.Model.AccountModel", "Account")
                        .WithMany("AccountLinkEntry")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__account_link_account_id__account_id");

                    b.HasOne("NexusForever.Database.Auth.Model.AccountLinkModel", "Link")
                        .WithMany("AccountLinkEntry")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__account_link_id__link_id");

                    b.Navigation("Account");

                    b.Navigation("Link");
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountPermissionModel", b =>
                {
                    b.HasOne("NexusForever.Database.Auth.Model.AccountModel", "Account")
                        .WithMany("AccountPermission")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__account_permission_id__account_id");

                    b.HasOne("NexusForever.Database.Auth.Model.PermissionModel", "Permission")
                        .WithMany("AccountPermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__account_permission_permission_id__permission_id");

                    b.Navigation("Account");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountRewardTrackMilestoneModel", b =>
                {
                    b.HasOne("NexusForever.Database.Auth.Model.AccountRewardTrackModel", "RewardTrack")
                        .WithMany("Milestone")
                        .HasForeignKey("Id", "RewardTrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__account_reward_track_milestone_id-rewardTrackId__account_reward_track_id-rewardTrackId");

                    b.Navigation("RewardTrack");
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountRewardTrackModel", b =>
                {
                    b.HasOne("NexusForever.Database.Auth.Model.AccountModel", "Account")
                        .WithMany("AccountRewardTrack")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__account_reward_track_id__account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountRoleModel", b =>
                {
                    b.HasOne("NexusForever.Database.Auth.Model.AccountModel", "Account")
                        .WithMany("AccountRole")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__account_role_id__account_id");

                    b.HasOne("NexusForever.Database.Auth.Model.RoleModel", "Role")
                        .WithMany("AccountRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__account_role_role_id__role_id");

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountStoreTransactionModel", b =>
                {
                    b.HasOne("NexusForever.Database.Auth.Model.AccountModel", "Account")
                        .WithMany("AccountStoreTransaction")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__account_store_transaction_id__account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.RolePermissionModel", b =>
                {
                    b.HasOne("NexusForever.Database.Auth.Model.RoleModel", "Role")
                        .WithMany("RolePermission")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__role_permission_id__role_id");

                    b.HasOne("NexusForever.Database.Auth.Model.PermissionModel", "Permission")
                        .WithMany("RolePermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__role_permission_permission_id__permission_id");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountLinkModel", b =>
                {
                    b.Navigation("AccountLinkEntry");
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountModel", b =>
                {
                    b.Navigation("AccountCostumeUnlock");

                    b.Navigation("AccountCurrency");

                    b.Navigation("AccountEntitlement");

                    b.Navigation("AccountGenericUnlock");

                    b.Navigation("AccountItem");

                    b.Navigation("AccountItemCooldown");

                    b.Navigation("AccountKeybinding");

                    b.Navigation("AccountLinkEntry");

                    b.Navigation("AccountPermission");

                    b.Navigation("AccountRewardTrack");

                    b.Navigation("AccountRole");

                    b.Navigation("AccountStoreTransaction");
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.AccountRewardTrackModel", b =>
                {
                    b.Navigation("Milestone");
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.PermissionModel", b =>
                {
                    b.Navigation("AccountPermission");

                    b.Navigation("RolePermission");
                });

            modelBuilder.Entity("NexusForever.Database.Auth.Model.RoleModel", b =>
                {
                    b.Navigation("AccountRole");

                    b.Navigation("RolePermission");
                });
#pragma warning restore 612, 618
        }
    }
}
